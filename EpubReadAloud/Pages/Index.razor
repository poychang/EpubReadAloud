@page "/"
@using System.Diagnostics;
@using System.IO
@using HtmlAgilityPack
@using System.Text
@using System.Text.RegularExpressions
@using Tewr.Blazor.FileReader
@using System.Threading;
@using VersOne.Epub
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime

<div class="container">
    <h1>Hello, Epub Read Aloud!</h1>
    <br />

    <div class="container">
        <div class="row align-items-center">
            <div class="col">
                @*<input type="file" @ref=inputElement />*@
                <div class="my-3">
                    <label for="formFile" class="form-label">Choose your .epub file</label>
                    <input type="file" id="formFile" class="form-control" @ref=inputElement />
                </div>
                <div class="my-3">
                    <div class="btn-group" role="group" aria-label="Handle ePub file">
                        <button type="button" @onclick=LoadFile class="btn btn-primary">Load file</button>
                        <button type="button" @onclick=ClearFile class="btn btn-primary">Clear</button>
                        <button type="button" @onclick=CancelLoadFile disabled=@isCancelDisabled class="btn btn-primary">Cancel</button>
                    </div>
                    <div class="btn-group" role="group" aria-label="Control">
                        <button type="button" @onclick=@(()=>{isHideLog = !isHideLog;}) class="btn btn-info">Show Log</button>
                    </div>
                    <div class="btn-group" role="group" aria-label="Control">
                        <button type="button" @onclick=Previous class="btn btn-primary"><span class="oi oi-chevron-left" /></button>
                        <button type="button" disabled class="btn btn-secondary">@currentPage / @totalPage</button>
                        <button type="button" @onclick=Next class="btn btn-primary"><span class="oi oi-chevron-right" /></button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-start" hidden="@isHideLog">
            <div class="col">
                <div class="input-group">
                    <span class="input-group-text">Log</span>
                    <textarea class="form-control" rows=15 aria-label="Log">@log</textarea>
                </div>
            </div>
        </div>
        <div class="row align-items-start">
            <div class="col">
                <p>@((MarkupString)epubContent)</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int BufferSize { get; set; } = 20480;

    ElementReference inputElement;
    IFileReference inputFile;
    CancellationTokenSource cancellationTokenSource;
    bool canCancel;
    bool isCancelDisabled => !canCancel;
    bool isHideLog = true;
    string log;
    EpubBook epubBook;
    string epubContent;
    int currentPage;
    int totalPage;

    public async Task LoadFile()
    {
        log = string.Empty;

        this.StateHasChanged();
        var files = await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync();
        inputFile = files.First();

        var fileInfo = await inputFile.ReadFileInfoAsync();

        log += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{Environment.NewLine}";
        log += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{Environment.NewLine}";
        log += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{Environment.NewLine}";
        log += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{Environment.NewLine}";
        foreach (var property in fileInfo.NonStandardProperties.Keys)
        {
            log += $"{nameof(IFileInfo)}.{property} (nonstandard): {fileInfo.NonStandardProperties[property]}{Environment.NewLine}";
        }
        log += $"Reading file...";

        this.StateHasChanged();

        cancellationTokenSource?.Dispose();
        cancellationTokenSource = new CancellationTokenSource();
        canCancel = true;

        // Only report if percentage has moved over 10% since last call to Acknowledge()
        const int onlyReportProgressAfterThisPercentDelta = 10;
        // Subscribe to progress (change of position)
        fileInfo.PositionInfo.PositionChanged += (s, e) =>
        {
            if (e.PercentageDeltaSinceAcknowledge > onlyReportProgressAfterThisPercentDelta)
            {
                log += $"Read {(e.PositionDeltaSinceAcknowledge)} bytes ({e.Percentage:00}%). {e.Position} / {fileInfo.Size}{Environment.NewLine}";
                this.InvokeAsync(this.StateHasChanged);
                e.Acknowledge();
            }
        };

        try
        {
            // That does nothing with the data other then updating its position property.
            var ps = new MemoryStream();
            using var fs = await inputFile.OpenReadAsync();
            await fs.CopyToAsync(ps, BufferSize, cancellationTokenSource.Token);
            log += $"Done reading file {fileInfo.Name} - {fileInfo.Size} bytes.{Environment.NewLine}";
            this.StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            log += $"Operation was cancelled";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
        }
        finally
        {
            canCancel = false;
        }

        await LoadEpubBook();
        await TurnEpubBookTo(currentPage);
    }

    public async Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
    }

    public async Task CancelLoadFile()
    {
        log += $"Cancel requested.{Environment.NewLine}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellationTokenSource.Cancel();
    }

    public async Task LoadEpubBook()
    {
        try
        {
            using var ms = await inputFile.CreateMemoryStreamAsync();
            epubBook = await EpubReader.ReadBookAsync(ms);
            currentPage = 1;
            totalPage = epubBook.ReadingOrder.Count();
        }
        catch (Exception ex)
        {
            log += ex.Message;
        }
    }

    public async Task TurnEpubBookTo(int target)
    {
        try
        {
            foreach (var textContentFile in epubBook.ReadingOrder.Skip(target).Take(1))
            {
                var htmlDocument = new HtmlDocument();
                htmlDocument.LoadHtml(textContentFile.Content);
                var contentText = new StringBuilder();
                contentText.AppendLine(htmlDocument.DocumentNode.SelectNodes("/html/body/div[@class='main']").First().InnerText.Trim());
                epubContent += Regex.Replace(contentText.ToString(), $"{Environment.NewLine}+", "<BR>");
            }
        }
        catch (Exception ex)
        {
            log += ex.Message;
        }
    }

    public async Task Previous()
    {
        currentPage = currentPage == 1 ? 1 : currentPage - 1;
        epubContent = string.Empty;
        await TurnEpubBookTo(currentPage);
    }

    public async Task Next()
    {
        currentPage = currentPage == totalPage ? totalPage : currentPage + 1;
        epubContent = string.Empty;
        await TurnEpubBookTo(currentPage);
    }
}
